{"version":3,"file":"static/js/328.622fcc65.chunk.js","mappings":"+SAEaA,EAAmB,mCAAG,4FACrB,gDACA,mCAENC,EAAU,IAAIC,gBAAgB,CAClCC,QAHU,qCAFqB,kBAQFC,EAAAA,EAAAA,IAAA,UAPnB,gDAOmB,YAAoBH,IARlB,cAQzBI,EARyB,yBASxBA,EAAeC,KAAKC,SATI,kCAW/BC,QAAQC,IAAR,MAX+B,0DAAH,qDAgBnBC,EAAc,mCAAG,WAAOC,GAAP,kFACtBC,EADsB,6CACsBD,GACtC,mCAENV,EAAU,IAAIC,gBAAgB,CAClCC,QAHU,qCAFgB,kBASNC,EAAAA,EAAAA,IAAA,UAAaQ,EAAb,YAAoBX,IATd,cASpBY,EAToB,yBAUnBA,GAVmB,kCAY1BL,QAAQC,IAAR,MAZ0B,0DAAH,sDAkBdK,EAAc,mCAAG,WAAOH,GAAP,kFACtBC,EADsB,6CACsBD,EADtB,YAEhB,mCAENV,EAAU,IAAIC,gBAAgB,CAClCC,QAHU,qCAFgB,kBASNC,EAAAA,EAAAA,IAAA,UAAaQ,EAAb,YAAoBX,IATd,cASpBY,EAToB,yBAUnBA,EAAMP,MAVa,kCAY1BE,QAAQC,IAAR,MAZ0B,0DAAH,sDAgBdM,EAAiB,mCAAG,WAAOJ,GAAP,kFACzBC,EADyB,6CACmBD,EADnB,YAEnB,mCAENV,EAAU,IAAIC,gBAAgB,CAClCC,QAHU,qCAFmB,kBASTC,EAAAA,EAAAA,IAAA,UAAaQ,EAAb,YAAoBX,IATX,cASvBY,EATuB,yBAUtBA,EAAMP,MAVgB,kCAY7BE,QAAQC,IAAR,MAZ6B,0DAAH,sDAgBjBO,EAAiB,mCAAG,WAAMC,GAAN,2HAEnB,mCAENhB,EAAU,IAAIC,gBAAgB,CAClCC,QAHU,mCAIVe,MAAOD,IANsB,kBAUTb,EAAAA,EAAAA,IAAA,UAVS,4CAUT,YAAoBH,IAVX,cAUvBY,EAVuB,yBAWtBA,EAAMP,KAAKC,SAXW,kCAa7BC,QAAQC,IAAR,MAb6B,0DAAH,qD,sICnE9B,GAAgB,KAAO,oB,2BC8DvB,EAtDa,WACX,OAAwBU,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,IACEH,GAAW,GACX,IAAMI,EAAY,mCAAG,qGACKf,EAAAA,EAAAA,IAAeY,GADpB,OACbI,EADa,OAEnBT,EAAQS,EAAUV,MAFC,2CAAH,qDAKlBS,GASD,CARC,MAAOP,GACHA,EAAMS,UAAYT,EAAMS,SAASC,OACnCT,GAAS,EAIZ,CAdD,QAeEE,GAAW,EACZ,CAEF,GAAE,CAACC,KAGF,gCACGF,IAAa,SAACS,EAAA,EAAD,IACbX,IAAS,eAAIY,UAAWC,EAAAA,MAAf,oCACV,eAAID,UAAWC,EAAAA,KAAf,SACGf,EAAKgB,KAAI,SAAAC,GACR,OACE,2BACE,gBACEC,IACED,EAAOE,aAtCD,mCAuCgBF,EAAOE,aACzBC,EAENC,IAAKJ,EAAOK,KACZC,MAAM,QAGR,uBAAIN,EAAOK,QACX,uCAAeL,EAAOO,eAZfP,EAAOQ,QAenB,QAIR,C","sources":["Services/FetchMovies.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchTrendingMovies = async () => {\n  const URL = 'https://api.themoviedb.org/3/trending/all/day';\n  const KEY = '3a46a7267a5317e24c5053073610996d';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n  try {\n    const TrendingMovies = await axios.get(`${URL}?${options}`);\n    return TrendingMovies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nexport const fetchMovieById = async (id) => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}`;\n  const KEY = '3a46a7267a5317e24c5053073610996d';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\n\nexport const fetchMovieCast = async (id) => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/credits`;\n  const KEY = '3a46a7267a5317e24c5053073610996d';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async (id) => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/reviews`;\n  const KEY = '3a46a7267a5317e24c5053073610996d';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchSearchMovies = async search => {\n  const URL = `https://api.themoviedb.org/3/search/movie`;\n  const KEY = '3a46a7267a5317e24c5053073610996d';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n    query: search,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__m5y0R\"};","import { fetchMovieCast } from '../../Services/FetchMovies';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from './Cast.module.css';\nimport noImages from '../Image/NoImage.jpg';\nimport { Loader } from '../../components/Loader/Loader';\n\nconst IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  useEffect(() => {\n    try {\n      setLoading(true);\n      const getMovieCast = async () => {\n        const movieCast = await fetchMovieCast(movieId);\n        setCast(movieCast.cast);\n      };\n\n      getMovieCast();\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        setError(true);\n      } else {\n        setError(true);\n      }\n    } finally {\n      setLoading(false);\n    }\n    \n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <h2 className={css.title}>No data from services</h2>}\n      <ul className={css.cast}>\n        {cast.map(person => {\n          return (\n            <li key={person.cast_id}>\n              <img\n                src={\n                  person.profile_path\n                    ? IMAGES_BASE_URL + person.profile_path\n                    : noImages\n                }\n                alt={person.name}\n                width=\"80\"\n              />\n\n              <p>{person.name}</p>\n              <p>Character: {person.character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;"],"names":["fetchTrendingMovies","options","URLSearchParams","api_key","axios","TrendingMovies","data","results","console","log","fetchMovieById","id","URL","movie","fetchMovieCast","fetchMovieReviews","fetchSearchMovies","search","query","useState","cast","setCast","error","setError","isLoading","setLoading","movieId","useParams","useEffect","getMovieCast","movieCast","response","status","Loader","className","css","map","person","src","profile_path","noImages","alt","name","width","character","cast_id"],"sourceRoot":""}